@page "/status/create"
@using AppAmostras.Data
@using AppAmostras.Models
@using AppAmostras.Repositories
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IStatusRepository StatusRepository
@attribute [Authorize]

<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>
        Já existe uma amostra com o código informado.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModal">Fechar</Button>
    </FooterTemplate>
</Modal>

<h4>Novo Registro</h4>
<hr />
<div class="row">
    <div class="col-md-4">
    <EditForm Model="@status" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
            <div class="mb-3">
                <label class="form-label">Nome da categoria</label>
                <InputText @bind-Value="status.Descricao" class="form-control" style="text-transform:uppercase" required />
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>    
            <a href="/status" class="btn btn-light">Cancelar</a>
    </EditForm>
    </div>
</div>
<hr />
@code {
    public Status status { get; set; } = new();   
    private Modal modal;
    
    public async Task OnValidSubmitAsync()
    {       

        bool statusExiste = Db.Status.Any(a => a.Descricao.Equals(status.Descricao));
        if (statusExiste)
        {
            OnShowModal();
        }
        else
        {
            await StatusRepository.CreateAsync(status);
            Navigation.NavigateTo("status");
        }
    }

    private async Task OnShowModal()
    {
        await modal?.ShowAsync();
    }

    private async Task OnHideModal()
    {
        await modal?.HideAsync();
    }
}